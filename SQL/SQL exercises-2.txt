Exercise 1:
Create table ssdx_tmp.sales_Fawzy (
Year INT ,
Month Int ,
prd_id int ,
emp_id int,
Amount number(30),
PRIMARY KEY (Year, Month, prd_id) );


1- * select SUM(amount) AS total_month_amount
from ssdx_tmp.sales_Fawzy
where month<4;


*select SUM(amount) AS total_product_type_amount
from ssdx_tmp.sales_Fawzy

SELECT
    SUM(CASE WHEN month < 4 THEN amount ELSE 0 END) AS total_month_amount,
    SUM(amount) AS total_product_type_amount
FROM
    ssdx_tmp.sales_Fawzy;

2-SELECT
    month,
    amount AS current_month_sales,
    LAG(amount) OVER (ORDER BY month) AS prev_month_sales,
    LEAD(amount) OVER (ORDER BY month) AS next_month_sales
FROM
    ssdx_tmp.sales_Fawzy;

3-SELECT
    month,
    DENSE_RANK() OVER (ORDER BY SUM(amount) DESC) AS ranking
FROM
    ssdx_tmp.sales_Fawzy
GROUP BY
    month;



Exercise 2:

Create table ssdx_tmp.Statistics_Fawzy (
EmployeeIDNo INT, 
Salary number(10),
Benefits number(10),
Position varchar2(30)
);

insert into ssdx_tmp.Statistics_Fawzy (EmployeeIDNo, salary, benefits, position)
Values (441,28000,7500, 'Entry-level');

1-    select MIN(benefits) AS smallest_benefit
    from ssdx_tmp.Statistics_Fawzy
    where position = 'Manager';

------> OR<------
SELECT
    EmployeeIDNo,
    MIN(benefits) AS smallest_benefit
FROM
    ssdx_tmp.Statistics_Fawzy
WHERE
    position = 'Manager'
GROUP BY
    EmployeeIDNo;


2-SELECT
    employeeidno,
    position,
    salary AS max_salary
FROM (
    SELECT
        employeeidno,
        position,
        salary,
        ROW_NUMBER() OVER (PARTITION BY position ORDER BY salary DESC) AS salary_rank
    FROM
        ssdx_tmp.Statistics_Fawzy
) 
WHERE
    salary_rank = 1;


3-SELECT
    employeeidno,
    position,
    salary ,
    benefits AS MAX_BENEFITS
FROM (
    SELECT
        employeeidno,
        position,
        salary,
        benefits,
        ROW_NUMBER() OVER (PARTITION BY position ORDER BY benefits DESC) AS benefits_rank
    FROM
        ssdx_tmp.Statistics_Fawzy
) 
WHERE
    benefits_rank = 1 AND salary>40000;



Exercise 3:

Create table ssdx_tmp.items_Fawzy (
customerid INT,
order_date Date,
item varchar2(100),
quanity INT, 
price number(30)
);

create table ssdx_tmp.Customer_Fawzy (
customerid INT,
firstname varchar(40),
lastname varchar2(40),
city varchar2(40),
state varchar2(40)
);

1-select * from Items_Ordered where customerid = 10449;

2-select * from Items_Ordered where item='tent';

3-select * from Items_Ordered where item LIKE 's%';

4-SELECT item, rn
FROM (
    SELECT
        item,
        ROW_NUMBER() OVER (PARTITION BY item ORDER BY item) AS rn
    FROM
        Items_ordered
) 
WHERE
    rn = 1;


Exercise 4:

a- SELECT salesperson.name
FROM salesperson
JOIN orders ON salesperson.id = orders.salesperson_id
LEFT JOIN customer ON orders.cust_id = customer.id
WHERE customer.name = 'Samsonic';


b-SELECT DISTINCT salesperson.name
FROM salesperson
WHERE NOT EXISTS (
    SELECT 1
    FROM orders
    JOIN customer ON orders.cust_id = customer.id
    WHERE salesperson.id = orders.salesperson_id
    AND customer.name = 'Samsonic'
);

c-SELECT DISTINCT salesperson.name
FROM salesperson
WHERE (
    SELECT COUNT(*) as sales_Count
    FROM orders
    WHERE orders.salesperson_id = salesperson.id
) >= 2;

d-INSERT INTO highAchiever (Name, Age)
SELECT Name, Age
FROM salesperson
WHERE Salary >= 100000;


Exercise 5:

a-SELECT country, MAX(numGuns) AS maxNumGuns
FROM classes
GROUP BY country
ORDER BY maxNumGuns DESC;


b-SELECT ships.ship_class
FROM ships
JOIN outcomes ON ships.ship_name = outcomes.outcomes_ship
WHERE outcomes.outcomes_result = 'Loose';

c-select ship_name from ships
join classes on ships.ship_class = classes.classes_class
where classes.bore >=16;

d-SELECT battles.battles_name
FROM battles
JOIN outcomes ON battles.battles_name = outcomes.outcomes_battles
JOIN ships ON outcomes.outcomes_ship = ships.ship_name
WHERE ships.ship_class = 'Kongo';

e-SELECT s.ship_name
FROM ships s
JOIN classes c ON s.ship_class = c.classes_class
WHERE c.numGuns = (
    SELECT MAX(c2.numGuns)
    FROM ships s2
    JOIN classes c2 ON s2.ship_class = c2.classes_class
    WHERE c2.bore = c.bore
);

